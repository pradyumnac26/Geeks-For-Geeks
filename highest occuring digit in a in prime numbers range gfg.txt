// C++ program to find the highest occurring digit 
// in prime numbers in a range L to R. 
#include<bits/stdc++.h> 
using namespace std; 

// Sieve of Eratosthenes 
void sieve(bool prime[], int n) 
{ 
	for (int p = 2; p * p <= n; p++) 
	{ 
		if (prime[p] == false) 
			for (int i = p*2; i <= n; i+=p) 
				prime[i] = true; 
	} 
} 

// Returns maximum occurring digits in primes 
// from l to r. 
int maxDigitInPrimes(int L, int R) 
{ 
	bool prime[R+1]; 
	memset(prime, 0, sizeof(prime)); 

	// Finding the prime number up to R. 
	sieve(prime, R); 

	// Initialse frequency of all digit to 0. 
	int freq[10] = { 0 }; 
	int val; 

	// For all number between L to R, check if prime 
	// or not. If prime, incrementing the frequency 
	// of digits present in the prime number. 
	for (int i = L; i <= R; i++) 
	{ 
		if (!prime[i]) 
		{ 
			int p = i; // If i is prime 
			while (p) 
			{ 
				freq[p%10]++; 
				p /= 10; 
			} 
		} 
	} 

	// Finding digit with highest frequency. 
	int max = freq[0], ans = 0; 
	for (int j = 1; j < 10; j++) 
	{ 
		if (max <= freq[j]) 
		{ 
			max = freq[j]; 
			ans = j; 
		} 
	} 

	return ans; 
} 

// Driven Program 
int main() 
{ 
	int L = 1, R = 20; 

	cout << maxDigitInPrimes(L, R) << endl; 
	return 0; 
} 


/////////////////////


# Python 3 program to find the highest 
# occurring digit in prime numbers 
# in a range L to R. 

# Sieve of Eratosthenes 
def sieve(prime, n): 
	p = 2
	while p * p <= n : 
		if (prime[p] == False): 
			for i in range(p * 2, n, p): 
				prime[i] = True
				
		p += 1

# Returns maximum occurring digits 
# in primes from l to r. 
def maxDigitInPrimes(L, R): 

	prime = [0] * (R + 1) 

	# Finding the prime number up to R. 
	sieve(prime, R) 

	# Initialse frequency of all 
	# digit to 0. 
	freq = [0] * 10

	# For all number between L to R, 
	# check if prime or not. If prime, 
	# incrementing the frequency 
	# of digits present in the prime number. 
	for i in range(L, R + 1): 
		if (not prime[i]): 
			p = i # If i is prime 
			while (p): 
				freq[p % 10] += 1
				p //= 10

	# Finding digit with highest frequency. 
	max = freq[0] 
	ans = 0
	for j in range(1, 10): 
		if (max <= freq[j]): 
			max = freq[j] 
			ans = j 

	return ans 

# Driver Code 
if __name__=="__main__": 
	
	L = 1
	R = 20

	print(maxDigitInPrimes(L, R)) 

# This code is contributed by ita_c 
