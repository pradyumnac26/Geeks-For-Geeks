// C++ program to find longest 
// contiguous subsequence 
#include <bits/stdc++.h> 
using namespace std; 

// Returns length of the longest 
// contiguous subsequence 
int findLongestConseqSubseq(int arr[], int n) 
{ 
	int ans = 0, count = 0; 

	// sort the array 
	sort(arr, arr + n); 

	// find the maximum length 
	// by traversing the array 
	for (int i = 0; i < n; i++) { 
		// if the current element is equal 
		// to previous element +1 
		if (i > 0 && arr[i] == arr[i - 1] + 1) 
			count++; 
		// reset the count 
		else
			count = 1; 

		// update the maximum 
		ans = max(ans, count); 
	} 
	return ans; 
} 

// Driver program 
int main() 
{ 
	int arr[] = { 1, 9, 3, 10, 4, 20, 2 }; 
	int n = sizeof arr / sizeof arr[0]; 
	cout << "Length of the Longest contiguous subsequence is "
		<< findLongestConseqSubseq(arr, n); 
	return 0; 
} 


///////////////
t=int(input())
while t>0:
    n = int(input())
    a = list(map(int,input().split()))
    a=list(set(a))
    a.sort()
    maxc = 0
    count = 1
    if len(a) == 1:
        maxc = 1
    for i in range(len(a)-1):
        if a[i+1] == a[i] + 1:
            count += 1
        
        else:
            count = 1
        
        if count > maxc:
                maxc = count
        
    t -= 1
    print(maxc)
        